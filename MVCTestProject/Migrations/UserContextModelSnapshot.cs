// <auto-generated />
using System;
using MVCTestProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MVCTestProject.Migrations
{
    [DbContext(typeof(UserContext))]
    partial class UserContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MVCTestProject.DataModels.Cryptocurrency", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<double?>("CirculatingSupply")
                        .HasColumnType("float");

                    b.Property<int?>("CmcRank")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<double?>("MaxSupply")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumMarketPairs")
                        .HasColumnType("int");

                    b.Property<int>("QuoteId")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("TotalSupply")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("CryptoModel");
                });

            modelBuilder.Entity("MVCTestProject.DataModels.CryptocurrencyMetadata", b =>
                {
                    b.Property<int>("CryptoId")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateLaunched")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CryptoId");

                    b.ToTable("CryptoMetadatas");
                });

            modelBuilder.Entity("MVCTestProject.DataModels.Quote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CryptocurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("QuoteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CryptocurrencyId")
                        .IsUnique();

                    b.ToTable("Quote");
                });

            modelBuilder.Entity("MVCTestProject.DataModels.QuoteItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double?>("FullyDilutedMarketCap")
                        .HasColumnType("float");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<double?>("MarketCap")
                        .HasColumnType("float");

                    b.Property<double?>("MarketCapDominance")
                        .HasColumnType("float");

                    b.Property<double?>("PercentChange1h")
                        .HasColumnType("float");

                    b.Property<double?>("PercentChange24h")
                        .HasColumnType("float");

                    b.Property<double?>("PercentChange7d")
                        .HasColumnType("float");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int>("QuoteId")
                        .HasColumnType("int");

                    b.Property<double?>("Volume24h")
                        .HasColumnType("float");

                    b.Property<double?>("VolumeChange24h")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("QuoteId")
                        .IsUnique();

                    b.ToTable("QuoteItem");
                });

            modelBuilder.Entity("MVCTestProject.DataModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MVCTestProject.DataModels.CryptocurrencyMetadata", b =>
                {
                    b.HasOne("MVCTestProject.DataModels.Cryptocurrency", "CryptoModel")
                        .WithOne("Metadata")
                        .HasForeignKey("MVCTestProject.DataModels.CryptocurrencyMetadata", "CryptoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CryptoModel");
                });

            modelBuilder.Entity("MVCTestProject.DataModels.Quote", b =>
                {
                    b.HasOne("MVCTestProject.DataModels.Cryptocurrency", "Cryptocurrency")
                        .WithOne("Quote")
                        .HasForeignKey("MVCTestProject.DataModels.Quote", "CryptocurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cryptocurrency");
                });

            modelBuilder.Entity("MVCTestProject.DataModels.QuoteItem", b =>
                {
                    b.HasOne("MVCTestProject.DataModels.Quote", "Quote")
                        .WithOne("USD")
                        .HasForeignKey("MVCTestProject.DataModels.QuoteItem", "QuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quote");
                });

            modelBuilder.Entity("MVCTestProject.DataModels.Cryptocurrency", b =>
                {
                    b.Navigation("Metadata");

                    b.Navigation("Quote");
                });

            modelBuilder.Entity("MVCTestProject.DataModels.Quote", b =>
                {
                    b.Navigation("USD");
                });
#pragma warning restore 612, 618
        }
    }
}
